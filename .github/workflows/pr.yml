name: citra-enhanced-pr

on:
  pull_request:
    branches: [ master ]

jobs:
  source:
    if: ${{ !github.head_ref }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Pack
        run: ./.ci/source.sh
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: source
          path: artifacts/
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ["appimage", "fresh"]
    container:
      image: ishan09811/build-environments:linux-${{ matrix.target }}
      options: -u 1001
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: linux
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Build
        run: ./.ci/linux.sh
      - name: Pack
        run: ./.ci/pack.sh
        if: ${{ matrix.target == 'appimage' }}
      - name: Upload
        uses: actions/upload-artifact@v4
        if: ${{ matrix.target == 'appimage' }}
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  macos:
    runs-on: ${{ (matrix.target == 'x86_64' && 'macos-13') || 'macos-14' }}
    strategy:
      matrix:
        target: ["x86_64", "arm64"]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: macos
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Install tools
        run: brew install ccache ninja spirv-tools
      - name: Build
        run: ./.ci/macos.sh
      - name: Prepare outputs for caching
        run: mv build/bundle $OS-$TARGET
      - name: Cache outputs for universal build
        uses: actions/cache/save@v4
        with:
          path: ${{ env.OS }}-${{ env.TARGET }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
  macos-universal:
    runs-on: macos-14
    needs: macos
    env:
      OS: macos
      TARGET: universal
    steps:
      - uses: actions/checkout@v4
      - name: Download x86_64 build from cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.OS }}-x86_64
          key: ${{ runner.os }}-x86_64-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
          fail-on-cache-miss: true
      - name: Download ARM64 build from cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.OS }}-arm64
          key: ${{ runner.os }}-arm64-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
          fail-on-cache-miss: true
      - name: Create universal app
        run: ./.ci/macos-universal.sh
        env:
          ARTIFACTS: ${{ env.OS }}-x86_64 ${{ env.OS }}-arm64
      - name: Pack
        run: ./.ci/pack.sh
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: ["msvc", "msys2"]
    defaults:
      run:
        shell: ${{ (matrix.target == 'msys2' && 'msys2') || 'bash' }} {0}
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: windows
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.target == 'msvc' }}
      - name: Install extra tools (MSVC)
        run: choco install ccache ninja wget
        if: ${{ matrix.target == 'msvc' }}
      - name: Install vulkan-sdk (MSVC)
        run: |
          wget https://sdk.lunarg.com/sdk/download/1.3.280.0/windows/VulkanSDK-1.3.280.0-Installer.exe -O D:/a/_temp/vulkan.exe
          D:/a/_temp/vulkan.exe --accept-licenses --default-answer --confirm-command install
        if: ${{ matrix.target == 'msvc' }}
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        if: ${{ matrix.target == 'msys2' }}
        with:
          msystem: clang64
          update: true
          install: git make p7zip
          pacboy: >-
            toolchain:p ccache:p cmake:p ninja:p spirv-tools:p
            qt6-base:p qt6-multimedia:p qt6-multimedia-wmf:p qt6-tools:p qt6-translations:p
      - name: Disable line ending translation
        run: git config --global core.autocrlf input
      - name: Build
        run: ./.ci/windows.sh
      - name: Pack
        run: ./.ci/pack.sh
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
          
  Android-ARM64:
      runs-on: ubuntu-latest

      strategy:
        matrix:
          build_type:
            - release
      env:
        CCACHE_DIR: ${{ github.workspace }}/.ccache

      steps:
      - name: Set BUILD_TYPE variable
        run: echo "BUILD_TYPE=${{ matrix.build_type }}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
      - name: Fetch submodules
        run: git submodule update --init --recursive

      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-android-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-

        env:
           SEGMENT_DOWNLOAD_TIMEOUT_MINS: '1'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Deps
        run: |
            sudo add-apt-repository -y ppa:theofficialgman/gpu-tools
            sudo apt-get update -y
            sudo apt-get install ccache glslang-dev glslang-tools apksigner -y

      - name: Build
        run: |
          chmod +x ./.ci/export.sh
          ./.ci/export.sh

          # Build the Android app with Gradle
          cd src/android
          ./gradlew assemble${{ env.BUILD_TYPE }}
          ls -R app/build/outputs
          cd ../..
          chmod +x ./.ci/end.sh
          ./.ci/end.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Android-APK
          path: |
            ./src/android/app/build/outputs/apk/canary/${{ env.BUILD_TYPE }}/app-canary-${{ env.BUILD_TYPE }}.apk
  ios:
    runs-on: macos-14
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: ios
      TARGET: arm64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ios-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ios-
      - name: Install tools
        run: brew install ccache ninja
      - name: Build
        run: ./.ci/ios.sh
